First meeting:
Attendants: Mikkel, Nikolaj, Mikael
Summary:
	- We need a time schedule.
		- Initially, everyone looks into part1: Planning

	- Wavefront algorithm is used to find shortest path to offloading station.
		- Find the best Wavefront algorithm we've made.
		- It should be easy: In init phase, a wavefront is made for the two offloading stations.
		  Then the robot should always be able to give a (x,y)
		  and instantly ( in O(1) ) know which pixel to move to next.
		  
	- Configuration space: Padding of obstacles (walls) by 4 pixels (only pad freespace!)
		- The robot starts by creating the configuration space,
		  so it can be reduced to a point robot!

	- Circle scan.

	- Look into Coverage algorithms in the book.

Second meeting:
Attendants: Entire group
Summary:
	- We must ask Jimmy about part1 and part2 coupling.

	- Time schedule draft: In "schedule.txt".
	- Weekly meetings tuesday afternoons!

	- Dual wavefront: Make two waves at the same time for offloading stations.
	- Remember the path to offloading station, so you can go back to where you picked up cup.
	
	- We use 8-point connectivity everywhere!
	
	- Code indents: Use tabs!
	- Code style: Object oriented! No global variables/functions!
		//However, you may use the assignment.h header for assignment DEFINES.
	- Document your code! JavaDoc is good.
	- Headers don't hold implementation.
		- UNLESS you are making a template class. Then you put it in a .hpp file!

	- We need a map class given an image pointer and a wave/brush boolean thingy.
	- The map class must be the robot's interface to it's static surroundings. Like GPS.
		- Get pixVal, get brushVal, get waveVal.
	- The map class must remember the image given in ctor, so it can save modified copies.

	- We code for the TEK map or similiar maps. Door size etc. is in assignment.h, that's ok.

	- One robot class. One map class. One scanner class.
		- The robot only knows the TEK map through the map class.
		- Scanner class constructor saves a list of relative coordinates that are within the circle.
			- Ctor gets scanner radius so it can make the list on construction.

	- Niko continues his work on door detection and brushfire coverage etc.
	- Mikael makes the map signature header. And some implementation.
	- Mikkel makes the scanner class.
	- Michael does some LaTeX work.
	- Lukas makes the robot signature header.

Third meeting (28th of october):
Attendants: Entire group
Summary:
	- Work done since last time:
		-Mikael:
			- tekMap class
		-Nikolaj:
			- Implementation of brushfire
			- Implementation of using brushfire to find door locations.
		-Michael:
			- He has not made a shit. Except report LaTeX.
			  He is confused with preamble.
		-Lukas:
			- Funny robot header
			  It's missing some robot constructor parameters such as robot radius etc.
			  Functions could be optimized...
		-Mikkel:
			- scanner.h and scanner.cpp almost done.
			  ctor takes x and y and radius and makes an array of coordinates inside circle.
			  scan(x,y) scans and uses the circle from ctor.
			  Constructor is not done yet.

	- WE USE shared_ptr's! YAY!

	- Robot behavior decision: Make it pedagogical with respect to rooms vs. hallways.
				   Also, make it travel_distance effective.

	- Document your code! JavaDoc is mandatory!

	- Weird Cannys algorithm vs. Brushfire local maxima: Brushfire local maxima wins!

	- If vertex-edge graph representation of map becomes necessary,
	  it should be easy to implement in the tekMap class; The interface should not change.

	- Work for next time:
		-Mikael:
			- Assist Nikolaj.
			- Make intuitive pos_t.
		-Nikolaj:
			- Merge doorfinder.
		-Michael:
			- Update the preamble!
			- Update LaTeX structure.
			- Brushfire local maxima to find rooms.
		-Lukas:
			- Document and update robot!
			- Make some implementation.
			- Stop using notepad or Notesblok instead of Qt.
		-Mikkel:
			- Finish scanner.

Fourth meeting (4th of November):
Attendants: Entire group
Summary:
	- Work done since last time:
		-Mikael:
			- Intuitive pos_t. Working Brushfire and Wavefront.
			- CupScanner.
		-Nikolaj:
			- More door. Cooler nice much wow.
		-Michael:
			- He has not made a shit. Except a little more LaTeX.
		-Lukas:
			- Some robot functionality and pickup cup functionality.
		-Mikkel:
			- No scanner, because Mikael did it.

	- First, use Brushfire algorithm to mark doors.
	- Then, find centers of all rooms.
	- Generate sorted list of room centres to visit.
	- Travel between room centers while (not doorstep)
		if doorstep, cover the one room.
		- when room is covered, return to traveling between the rooms.

	Queue(pos) rooms_in_order	= generate_list();
	while(true) {
		nextRoom = rooms_in_order.pop();
		while(not door) {
			move_towards(nextRoom);
			if(stepped over doorStep)
				break;
		}
		cover_room_and_return_to_this_position;
	}

	- When robot is scan-covering a room, it collects cups that get within 1 m,
	but it doesn't deliberately move towards the detected cups before the room is scanned.
	When the room is scanned, it collects the cups remaining in the room (now with known positions).

	- Work for next time:
		-Mikael:
			- Make tekMap better inheritable.
			- Make some more wavefront.
		-Nikolaj:
			- Doorsteps.
		-Michael:
			- Make scan around inside room. Coverage algorithm.
		-Lukas:
			- Robot snobot flobot frobit.
		-Mikkel:
			- Make some algorithm to make rooms_in_order based on room centers.


Meeting (11th of November):
Attendants: Entire group
Summary:
	- We got a new idea which is described in “description of new solution.txt”	

	- Work for next time:
		- Michael changes the brushfire algorithm. He is only allowed to change
 		one that takes a coordinate in the constructor.
		
		- Nikolaj documents his work with graphs and other cool stuff. He
 		remembers to not go into too much detail about the code, but describe the
 		algorithms and so on.

		- Lukas finishes part 3
		
		- Mikkel finishes cup scanner.

		- Mikael finishes the floor sweeper.